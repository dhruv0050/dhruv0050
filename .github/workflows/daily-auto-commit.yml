name: Daily Build & Report

on:
  schedule:
    - cron: '0 21 * * *'    # daily at 02:30 IST (21:00 UTC previous day)
  workflow_dispatch: {}

concurrency:
  group: daily-build-report
  cancel-in-progress: true

jobs:
  build-and-report:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository (with write permissions)
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Detect project
        id: detect
        run: |
          if [ -f package.json ]; then
            echo "has_package=true" >> $GITHUB_OUTPUT
          else
            echo "has_package=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js (only if package.json exists)
        if: steps.detect.outputs.has_package == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Show Node/npm versions (if available)
        if: steps.detect.outputs.has_package == 'true'
        run: |
          node -v || true
          npm -v || true

      - name: Install dependencies (if package.json exists)
        if: steps.detect.outputs.has_package == 'true'
        run: npm ci

      - name: Run production build (if package.json exists)
        if: steps.detect.outputs.has_package == 'true'
        env:
          # Add these secrets in repo Settings → Secrets and variables → Actions if you use Firebase
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
        run: |
          echo "Running production build (will continue even if build fails)..."
          # keep the build from aborting the workflow if it fails; remove "|| true" if you want failures to stop the job
          npm run build || true

      - name: Generate report (JSON) or timestamp (if no package.json)
        run: |
          mkdir -p auto-update

          if [ "${{ steps.detect.outputs.has_package }}" = "true" ]; then
            # measure .next size if exists
            if [ -d ".next" ]; then
              BUILD_BYTES=$(du -sb .next | cut -f1)
            else
              BUILD_BYTES=0
            fi
            TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            NODE_VERSION=$(node -v 2>/dev/null || echo "node-not-installed")
            NPM_VERSION=$(npm -v 2>/dev/null || echo "npm-not-installed")
            GIT_COMMIT=$(git rev-parse --short HEAD || echo "unknown")

            printf '%s\n' \
              '{' \
              "  \"timestamp_utc\": \"${TIMESTAMP}\"," \
              "  \"commit\": \"${GIT_COMMIT}\"," \
              "  \"node_version\": \"${NODE_VERSION}\"," \
              "  \"npm_version\": \"${NPM_VERSION}\"," \
              "  \"next_build_bytes\": ${BUILD_BYTES}" \
              '}' > auto-update/build-report.json

            echo "report_file=auto-update/build-report.json" >> $GITHUB_OUTPUT
          else
            # no package.json — create a simple timestamp file so commits still happen
            echo "Last run (UTC): $(date -u +'%Y-%m-%d %H:%M:%SZ')" > auto-update/last-run.txt
            echo "timestamp_file=auto-update/last-run.txt" >> $GITHUB_OUTPUT
          fi

      - name: Debug - show created files
        run: |
          echo "Workspace files:"
          ls -la
          echo "auto-update contents:"
          ls -la auto-update || true
          echo "---- file preview ----"
          [ -f auto-update/build-report.json ] && cat auto-update/build-report.json || true
          [ -f auto-update/last-run.txt ] && cat auto-update/last-run.txt || true

      - name: Stage generated files
        run: |
          git add auto-update || true
          git status --porcelain || true

      - name: Check for changes
        id: check
        run: |
          if git diff --cached --quiet; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit & push (only if changed)
        if: steps.check.outputs.no_changes == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          # Ensure branch is up to date and avoid non-fast-forward
          git pull --rebase origin main || true
          git commit -m "commit" || true
          git push origin main
